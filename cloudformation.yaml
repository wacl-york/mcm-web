AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: WACL MCMWeb
Parameters:
  Deployment:
    Type: String
    Description: The name of the deployment - dev, staging, prod
  DomainName:
    Type: String
    Description: The domain name for the app
  PrivateSubnet1ID:
    Type: String
    Description: First private subnet ID
  PrivateSubnet2ID:
    Type: String
    Description: Second private subnet ID
  AppName:
    Type: String
    Description: The name of the app - or the repository slug
  CognitoClientID:
    Type: String
    Description: The Client ID for cognito auth
  CognitoSecret:
    Type: String
    NoEcho: true
    Description: The secret for cognito auth
  CognitoPoolID:
    Type: String
    Description: The cognito pool ID
    Default: eu-west-1_XP1nGHp9H
  CognitoOAuthURL:
    Type: String
    Description: The OAuth URL for Cognito
    Default: https://auth.aws.york.ac.uk
Mappings:
  DeploymentMap:
    dev:
      BannerText: This is the development instance!
      BannerType: warning
      BannerDismissable: true
      LogRetentionInDays: 7
    staging:
      BannerText: This is the staging instance!
      BannerType: danger
      BannerDismissable: true
      LogRetentionInDays: 7
    prod:
      BannerText: ""
      BannerType: ""
      BannerDismissable: false
      LogRetentionInDays: 90

Resources:
  # The lambda function
  SinatraWebFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda.lambda_handler
      Runtime: ruby2.7
      MemorySize: 512
      Timeout: 90
      AutoPublishAlias: live
      FunctionName: !Sub '${AppName}'
      Description: !Sub 'App: https://${DomainName}'
      Layers:
        - arn:aws:lambda:eu-west-1:733046350245:layer:sqliteLayer:3
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionStorageTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref AppSecrets
        - SNSPublishMessagePolicy:
            TopicName: !ImportValue SNSDeveloperAlertTopicName
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue WACLAppsSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1ID
          - !Ref PrivateSubnet2ID
      Environment:
        Variables:
          RACK_ENV: production
          SESSION_TABLE: !Ref SessionStorageTable
          APP_SECRET_NAME: !Sub 'WACLApp/${AppName}/secrets'
          DB_USER: test
          DB_HOST: test
          BANNER_TEXT: !FindInMap [DeploymentMap, !Ref Deployment, BannerText]
          BANNER_TYPE: !FindInMap [DeploymentMap, !Ref Deployment, BannerType]
          BANNER_DISMISSABLE: !FindInMap [DeploymentMap, !Ref Deployment, BannerDismissable]
          SNS_TOPIC: !ImportValue SNSDeveloperAlertArn
          TZ: Europe/London

  SinatraWebFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - SinatraWebFunction
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - '/aws/lambda/${LAMBDA_NAME}'
        - LAMBDA_NAME: !Ref SinatraWebFunction
      RetentionInDays: !FindInMap [DeploymentMap, !Ref Deployment, LogRetentionInDays]

  DomainNameRecord:
    Type: Custom::CNAME
    Properties:
      ServiceToken: "arn:aws:sns:eu-west-1:230504789214:RequestRecordSet"
      Source: !Sub '${DomainName}.'
      Target: !Sub
        - "${DNS}."
        - DNS: !ImportValue WACLAppsLoadBalancerDNS

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: false
      TargetType: "lambda"
      Targets:
        - Id: !Ref SinatraWebFunction.Alias
      TargetGroupAttributes:
        - Key: lambda.multi_value_headers.enabled
          Value: true

  ELBInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SinatraWebFunction.Alias
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  Certificate:
    Type: Custom::Certificate
    DependsOn: DomainNameRecord
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'

  CertificateDNSRecord:
    Type: Custom::CertificateDNSRecord
    Properties:
      CertificateArn: !Ref Certificate
      DomainName: !Ref DomainName
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'

  ValidationDomainRecord:
    Type: Custom::CNAME
    Properties:
      ServiceToken: 'arn:aws:sns:eu-west-1:230504789214:RequestRecordSet'
      Source: !GetAtt CertificateDNSRecord.Name
      Target: !GetAtt CertificateDNSRecord.Value

  IssuedCertificate:
    Type: Custom::IssuedCertificate
    Properties:
      CertificateArn: !Ref Certificate
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-certificate-provider'

  AllocateHTTPSListenerRulePriority:
    Type: Custom::AllocateListenerRulePriority
    Properties:
      ServiceToken: !ImportValue ListenerRulePriorityFunctionArn
      ListenerArn: !ImportValue WACLAppsLoadBalancerHTTPSListenerArn

  HTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue WACLAppsLoadBalancerHTTPSListenerArn
      Priority: !GetAtt AllocateHTTPSListenerRulePriority.Priority
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      Conditions:
        - Field: "host-header"
          Values:
            - !Ref DomainName

  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        - CertificateArn: !Ref IssuedCertificate
      ListenerArn: !ImportValue WACLAppsLoadBalancerHTTPSListenerArn

  # DynamoDB Table to store session data
  SessionStorageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: !Sub "${AppName} Sessions Table"
      TimeToLiveSpecification:
        AttributeName: 'ttl'
        Enabled: true

  # Secret application configuration (note some of this is not actually secret!)
  AppSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'WACLApp/${AppName}/secrets'
      GenerateSecretString:
        GenerateStringKey: 'SESSION_SECRET'
        SecretStringTemplate: !Sub '{"COGNITO_CLIENT_ID":"${CognitoClientID}","COGNITO_CLIENT_SECRET": "${CognitoSecret}","OAUTH_URL":"${CognitoOAuthURL}","COGNITO_POOL_ID":"${CognitoPoolID}"}'
